{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Light;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red9\green75\blue119;\red13\green108\blue175;
\red242\green242\blue242;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww16940\viewh12460\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
Readings:\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11"}}{\fldrslt \cf3 \ul \ulc3 The Swift Programming Language (Swift 2.2)\
\'a0(Links to an external site.)\
}}\pard\pardeftab720\partightenfactor0
\cf2 \'a0- \'a0{\field{\*\fldinst{HYPERLINK "https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11"}}{\fldrslt \cf4 https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11\
\'a0(Links to an external site.)\
}}\'a0\
Through the chapter on Properties\
You will want to download that to iBooks and eventually read the entire thing. \'a0The Swift Tour (the first chapter)\'a0you should know like the back of your hand. \'a0Everything up through properties you should be familiar with starting next week.\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Optional reading (Playgrounds which follow the book):
\f0\b0 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/nettlep/learn-swift"}}{\fldrslt \cf4 https://github.com/nettlep/learn-swift\
\'a0(Links to an external site.)\
}}\pard\pardeftab720\partightenfactor0
\cf2 Highly recommend exploring portions of the book which don't seem clear in the noted\'a0playgrounds. \'a0These implement all \'a0of the examples from the book so that you don't have to type them in yourself.\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Assignment
\f0\b0 \

\f1\b Problem 1 (20 points) 
\f0\b0 \'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Create a single view Project called Assignment2. \'a0\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Rename the ViewController.swift file to be MainController.swift and rename the class inside of the file to be MainController, changing the class name of the view controller in Main.storyboard to MainController in the identity inspector\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
install a navigation controller in the storyboard as demonstrated last wednesday in class\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
In the Main.storyboard on the view of the MainController place 3 buttons labeled Problem 2, Problem 3, Problem 4, respectively\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Drag out 3 UIViewControllers onto the storyboard\'a0\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
Create 3 UIViewController subclasses named Problem2ViewController,\'a0 Problem3ViewController, Problem4ViewController, respectively\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7	}\expnd0\expndtw0\kerning0
In the viewDidLoad function for each view controller set the title for the navigation bar to be Problem 2, 3, 4 respectively\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8	}\expnd0\expndtw0\kerning0
Assign the ViewController subclasses to be the ViewController for its respective InterfaceBuilder representation in Identity Inspector\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	9	}\expnd0\expndtw0\kerning0
Give Problem 2's view a green background with alpha of 0.1, Problem 3's a yellow background with an alpha of 0.1 and Problem 4's a blue background with an alpha of 0.1\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	10	}\expnd0\expndtw0\kerning0
Connect each button on the main page to its respective view controller via a Show segue\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	11	}\expnd0\expndtw0\kerning0
Verify that navigation to each scene and back works correctly\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	12	}\expnd0\expndtw0\kerning0
On each scene place a UIButton labelled "Run" and a UITextView for the output of the run\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	13	}\expnd0\expndtw0\kerning0
On each ViewController create an IBOutlet for the TextView and an IBAction for the button\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	14	}\expnd0\expndtw0\kerning0
Verify that hitting the button causes the action to fire by putting some text in the TextView\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	15	}\expnd0\expndtw0\kerning0
Make sure that layout constraints are applied to the (any, any) size class that will allow the app to run on any device.\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Problem 2 (50 Points)
\f0\b0 \
In the action method for the button in the Problem2ViewController implement the rules of Conway\'92s Game of Life via a for-in loop with a switch statement in the for-loop\'92s body based on the number of neighbors of the cell that are alive.\
To assign initial values use:\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb5 if arc4random_uniform(3) == 1 \{\cb1 \
\cb5  \cb1 \
\cb5 // set current cell to alive\cb1 \
\cb5 \}\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 As a reminder the rules are:\
\'a0 \'a0 1.\
\
Any live cell with fewer than two live neighbors dies or stays, as if caused by under-population.\
\'a0 \'a0 2.\
\
Any live cell with two or three live neighbors lives on to the next generation.\
\'a0 \'a0 3.\
\
Any live cell with more than three live neighbors dies, as if by overcrowding.\
\'a0 \'a0 4.\
\
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\
For purposes of this assignment the array "wraps". \'a0i.e.; in a 10x10 two-dimensional array: the neighbors of cell (0,0) are (9,9), (9,0), (9,1) (0,9), (0,1), (1,9),(1,0), (1,1) and so on for all cells located at a boundary.\
You will want to:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
create a 2-dimensional array of Bool's called before to hold the alive dead state and initialize that to some random value with arc4random upon entry to the IBAction\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
create a 2-dimensional array of Bool's called before to hold the alive dead state and initialize that to some random value with arc4random upon entry to the IBAction. Initially, 1/3rd of the cells should be alive, which can be done by using a the arc4random call shown above\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
count and print the number of living cells in before to the UITextView\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
loop over the before 2D array and count the living neighbors of each cell using a switch statement, observing the wrapping rules. Place the result of applying the rules above into the corresponding cell in the "after" 2D array.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Count and print the number of living cells in after to the UITextView\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Problem 3 (15 points)
\f0\b0 \
Extract the cell logic in Problem 2 to a top level function called step() which accepts a 2D array of bools as input and returns a 2D array of bools as output. Place that function in a separate swift file called Engine.swift. Repeat Problem 2 only invoking step() instead of embedding the logic in the IBAction\

\f1\b Problem 4 (15 points)\'a0
\f0\b0 \
Extract the logic for computing neighbors of a cell according to the wrapping rules into a top-level function called neighbors() which accepts a tuple of row-column coordinates and returns an array of row-column tuples of coordinates where each member of the returned array is a different neighbor of the input coordinate. Repeat Problem 3 only invoking creating a function called step2() which invokes neighbors() instead of directly embedding that functionality.\
}